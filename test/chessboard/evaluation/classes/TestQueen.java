package chessboard.evaluation.classes;

import static org.junit.Assert.assertTrue;

import java.util.List;

import org.junit.Test;

public class TestQueen {
	
	Queen queen = new Queen();
	
	@Test
	public void testGetAllPossibleNextPositions() {
		List<String> allPossibleNextPositions = queen.getAllPossibleNextPositions(4,3);
		assertTrue(27==allPossibleNextPositions.size());
		assertTrue(allPossibleNextPositions.contains("4,0"));
		assertTrue(allPossibleNextPositions.contains("4,1"));
		assertTrue(allPossibleNextPositions.contains("4,2"));
		assertTrue(allPossibleNextPositions.contains("4,4"));
		assertTrue(allPossibleNextPositions.contains("4,5"));
		assertTrue(allPossibleNextPositions.contains("4,6"));
		assertTrue(allPossibleNextPositions.contains("4,7"));
		assertTrue(allPossibleNextPositions.contains("0,3"));
		assertTrue(allPossibleNextPositions.contains("1,3"));
		assertTrue(allPossibleNextPositions.contains("2,3"));
		assertTrue(allPossibleNextPositions.contains("3,3"));
		assertTrue(allPossibleNextPositions.contains("5,3"));
		assertTrue(allPossibleNextPositions.contains("6,3"));
		assertTrue(allPossibleNextPositions.contains("7,3"));
		assertTrue(allPossibleNextPositions.contains("5,4"));
		assertTrue(allPossibleNextPositions.contains("6,5"));
		assertTrue(allPossibleNextPositions.contains("7,6"));
		assertTrue(allPossibleNextPositions.contains("3,2"));
		assertTrue(allPossibleNextPositions.contains("2,1"));
		assertTrue(allPossibleNextPositions.contains("1,0"));
		assertTrue(allPossibleNextPositions.contains("5,2"));
		assertTrue(allPossibleNextPositions.contains("6,1"));
		assertTrue(allPossibleNextPositions.contains("7,0"));
		assertTrue(allPossibleNextPositions.contains("3,4"));
		assertTrue(allPossibleNextPositions.contains("2,5"));
		assertTrue(allPossibleNextPositions.contains("1,6"));
		assertTrue(allPossibleNextPositions.contains("0,7"));
		
		allPossibleNextPositions = queen.getAllPossibleNextPositions(0,0);
		assertTrue(21==allPossibleNextPositions.size());
		assertTrue(allPossibleNextPositions.contains("0,1"));
		assertTrue(allPossibleNextPositions.contains("0,2"));
		assertTrue(allPossibleNextPositions.contains("0,3"));
		assertTrue(allPossibleNextPositions.contains("0,4"));
		assertTrue(allPossibleNextPositions.contains("0,5"));
		assertTrue(allPossibleNextPositions.contains("0,6"));
		assertTrue(allPossibleNextPositions.contains("0,7"));
		assertTrue(allPossibleNextPositions.contains("1,0"));
		assertTrue(allPossibleNextPositions.contains("2,0"));
		assertTrue(allPossibleNextPositions.contains("3,0"));
		assertTrue(allPossibleNextPositions.contains("4,0"));
		assertTrue(allPossibleNextPositions.contains("5,0"));
		assertTrue(allPossibleNextPositions.contains("6,0"));
		assertTrue(allPossibleNextPositions.contains("7,0"));
		assertTrue(allPossibleNextPositions.contains("1,1"));
		assertTrue(allPossibleNextPositions.contains("2,2"));
		assertTrue(allPossibleNextPositions.contains("3,3"));
		assertTrue(allPossibleNextPositions.contains("4,4"));
		assertTrue(allPossibleNextPositions.contains("5,5"));
		assertTrue(allPossibleNextPositions.contains("6,6"));
		assertTrue(allPossibleNextPositions.contains("7,7"));
		
		allPossibleNextPositions = queen.getAllPossibleNextPositions(0,7);
		assertTrue(21==allPossibleNextPositions.size());
		assertTrue(allPossibleNextPositions.contains("0,0"));
		assertTrue(allPossibleNextPositions.contains("0,1"));
		assertTrue(allPossibleNextPositions.contains("0,2"));
		assertTrue(allPossibleNextPositions.contains("0,3"));
		assertTrue(allPossibleNextPositions.contains("0,4"));
		assertTrue(allPossibleNextPositions.contains("0,5"));
		assertTrue(allPossibleNextPositions.contains("0,6"));
		assertTrue(allPossibleNextPositions.contains("1,7"));
		assertTrue(allPossibleNextPositions.contains("2,7"));
		assertTrue(allPossibleNextPositions.contains("3,7"));
		assertTrue(allPossibleNextPositions.contains("4,7"));
		assertTrue(allPossibleNextPositions.contains("5,7"));
		assertTrue(allPossibleNextPositions.contains("6,7"));
		assertTrue(allPossibleNextPositions.contains("7,7"));
		assertTrue(allPossibleNextPositions.contains("1,6"));
		assertTrue(allPossibleNextPositions.contains("2,5"));
		assertTrue(allPossibleNextPositions.contains("3,4"));
		assertTrue(allPossibleNextPositions.contains("4,3"));
		assertTrue(allPossibleNextPositions.contains("5,2"));
		assertTrue(allPossibleNextPositions.contains("6,1"));
		assertTrue(allPossibleNextPositions.contains("7,0"));
		
		allPossibleNextPositions = queen.getAllPossibleNextPositions(7,7);
		assertTrue(21==allPossibleNextPositions.size());
		assertTrue(allPossibleNextPositions.contains("7,0"));
		assertTrue(allPossibleNextPositions.contains("7,1"));
		assertTrue(allPossibleNextPositions.contains("7,2"));
		assertTrue(allPossibleNextPositions.contains("7,3"));
		assertTrue(allPossibleNextPositions.contains("7,4"));
		assertTrue(allPossibleNextPositions.contains("7,5"));
		assertTrue(allPossibleNextPositions.contains("7,6"));
		assertTrue(allPossibleNextPositions.contains("1,7"));
		assertTrue(allPossibleNextPositions.contains("2,7"));
		assertTrue(allPossibleNextPositions.contains("3,7"));
		assertTrue(allPossibleNextPositions.contains("4,7"));
		assertTrue(allPossibleNextPositions.contains("5,7"));
		assertTrue(allPossibleNextPositions.contains("6,7"));
		assertTrue(allPossibleNextPositions.contains("0,7"));
		assertTrue(allPossibleNextPositions.contains("6,6"));
		assertTrue(allPossibleNextPositions.contains("5,5"));
		assertTrue(allPossibleNextPositions.contains("4,4"));
		assertTrue(allPossibleNextPositions.contains("3,3"));
		assertTrue(allPossibleNextPositions.contains("2,2"));
		assertTrue(allPossibleNextPositions.contains("1,1"));
		assertTrue(allPossibleNextPositions.contains("0,0"));
		
		allPossibleNextPositions = queen.getAllPossibleNextPositions(7,0);
		assertTrue(21==allPossibleNextPositions.size());
		assertTrue(allPossibleNextPositions.contains("7,7"));
		assertTrue(allPossibleNextPositions.contains("7,1"));
		assertTrue(allPossibleNextPositions.contains("7,2"));
		assertTrue(allPossibleNextPositions.contains("7,3"));
		assertTrue(allPossibleNextPositions.contains("7,4"));
		assertTrue(allPossibleNextPositions.contains("7,5"));
		assertTrue(allPossibleNextPositions.contains("7,6"));
		assertTrue(allPossibleNextPositions.contains("0,0"));
		assertTrue(allPossibleNextPositions.contains("1,0"));
		assertTrue(allPossibleNextPositions.contains("2,0"));
		assertTrue(allPossibleNextPositions.contains("3,0"));
		assertTrue(allPossibleNextPositions.contains("4,0"));
		assertTrue(allPossibleNextPositions.contains("5,0"));
		assertTrue(allPossibleNextPositions.contains("6,0"));
		assertTrue(allPossibleNextPositions.contains("5,2"));
		assertTrue(allPossibleNextPositions.contains("4,3"));
		assertTrue(allPossibleNextPositions.contains("3,4"));
		assertTrue(allPossibleNextPositions.contains("2,5"));
		assertTrue(allPossibleNextPositions.contains("1,6"));
		assertTrue(allPossibleNextPositions.contains("0,7"));
		
		allPossibleNextPositions = queen.getAllPossibleNextPositions(0,2);
		assertTrue(21==allPossibleNextPositions.size());
		assertTrue(allPossibleNextPositions.contains("0,0"));
		assertTrue(allPossibleNextPositions.contains("0,1"));
		assertTrue(allPossibleNextPositions.contains("0,3"));
		assertTrue(allPossibleNextPositions.contains("0,4"));
		assertTrue(allPossibleNextPositions.contains("0,5"));
		assertTrue(allPossibleNextPositions.contains("0,6"));
		assertTrue(allPossibleNextPositions.contains("0,7"));
		assertTrue(allPossibleNextPositions.contains("1,2"));
		assertTrue(allPossibleNextPositions.contains("2,2"));
		assertTrue(allPossibleNextPositions.contains("3,2"));
		assertTrue(allPossibleNextPositions.contains("4,2"));
		assertTrue(allPossibleNextPositions.contains("5,2"));
		assertTrue(allPossibleNextPositions.contains("6,2"));
		assertTrue(allPossibleNextPositions.contains("7,2"));
		assertTrue(allPossibleNextPositions.contains("1,1"));
		assertTrue(allPossibleNextPositions.contains("2,0"));
		assertTrue(allPossibleNextPositions.contains("1,3"));
		assertTrue(allPossibleNextPositions.contains("2,4"));
		assertTrue(allPossibleNextPositions.contains("3,5"));
		assertTrue(allPossibleNextPositions.contains("4,6"));
		assertTrue(allPossibleNextPositions.contains("5,7"));
		
		allPossibleNextPositions = queen.getAllPossibleNextPositions(5,7);
		assertTrue(21==allPossibleNextPositions.size());
		assertTrue(allPossibleNextPositions.contains("0,7"));
		assertTrue(allPossibleNextPositions.contains("1,7"));
		assertTrue(allPossibleNextPositions.contains("2,7"));
		assertTrue(allPossibleNextPositions.contains("3,7"));
		assertTrue(allPossibleNextPositions.contains("4,7"));
		assertTrue(allPossibleNextPositions.contains("6,7"));
		assertTrue(allPossibleNextPositions.contains("7,7"));
		assertTrue(allPossibleNextPositions.contains("5,6"));
		assertTrue(allPossibleNextPositions.contains("5,5"));
		assertTrue(allPossibleNextPositions.contains("5,4"));
		assertTrue(allPossibleNextPositions.contains("5,3"));
		assertTrue(allPossibleNextPositions.contains("5,2"));
		assertTrue(allPossibleNextPositions.contains("5,1"));
		assertTrue(allPossibleNextPositions.contains("5,0"));
		assertTrue(allPossibleNextPositions.contains("6,6"));
		assertTrue(allPossibleNextPositions.contains("7,5"));
		assertTrue(allPossibleNextPositions.contains("4,6"));
		assertTrue(allPossibleNextPositions.contains("3,5"));
		assertTrue(allPossibleNextPositions.contains("2,4"));
		assertTrue(allPossibleNextPositions.contains("1,3"));
		assertTrue(allPossibleNextPositions.contains("0,2"));
		
		allPossibleNextPositions = queen.getAllPossibleNextPositions(7,6);
		assertTrue(21==allPossibleNextPositions.size());
		assertTrue(allPossibleNextPositions.contains("7,0"));
		assertTrue(allPossibleNextPositions.contains("7,1"));
		assertTrue(allPossibleNextPositions.contains("7,2"));
		assertTrue(allPossibleNextPositions.contains("7,3"));
		assertTrue(allPossibleNextPositions.contains("7,4"));
		assertTrue(allPossibleNextPositions.contains("7,5"));
		assertTrue(allPossibleNextPositions.contains("7,7"));
		assertTrue(allPossibleNextPositions.contains("0,6"));
		assertTrue(allPossibleNextPositions.contains("1,6"));
		assertTrue(allPossibleNextPositions.contains("2,6"));
		assertTrue(allPossibleNextPositions.contains("3,6"));
		assertTrue(allPossibleNextPositions.contains("4,6"));
		assertTrue(allPossibleNextPositions.contains("5,6"));
		assertTrue(allPossibleNextPositions.contains("6,6"));
		assertTrue(allPossibleNextPositions.contains("6,7"));
		assertTrue(allPossibleNextPositions.contains("6,5"));
		assertTrue(allPossibleNextPositions.contains("5,4"));
		assertTrue(allPossibleNextPositions.contains("4,3"));
		assertTrue(allPossibleNextPositions.contains("3,2"));
		assertTrue(allPossibleNextPositions.contains("2,1"));
		assertTrue(allPossibleNextPositions.contains("1,0"));
		
		allPossibleNextPositions = queen.getAllPossibleNextPositions(4,0);
		assertTrue(21==allPossibleNextPositions.size());
		assertTrue(allPossibleNextPositions.contains("0,0"));
		assertTrue(allPossibleNextPositions.contains("1,0"));
		assertTrue(allPossibleNextPositions.contains("2,0"));
		assertTrue(allPossibleNextPositions.contains("3,0"));
		assertTrue(allPossibleNextPositions.contains("5,0"));
		assertTrue(allPossibleNextPositions.contains("6,0"));
		assertTrue(allPossibleNextPositions.contains("7,0"));
		assertTrue(allPossibleNextPositions.contains("4,1"));
		assertTrue(allPossibleNextPositions.contains("4,2"));
		assertTrue(allPossibleNextPositions.contains("4,3"));
		assertTrue(allPossibleNextPositions.contains("4,4"));
		assertTrue(allPossibleNextPositions.contains("4,5"));
		assertTrue(allPossibleNextPositions.contains("4,6"));
		assertTrue(allPossibleNextPositions.contains("4,7"));
		assertTrue(allPossibleNextPositions.contains("3,1"));
		assertTrue(allPossibleNextPositions.contains("2,2"));
		assertTrue(allPossibleNextPositions.contains("1,3"));
		assertTrue(allPossibleNextPositions.contains("0,4"));
		assertTrue(allPossibleNextPositions.contains("5,1"));
		assertTrue(allPossibleNextPositions.contains("6,2"));
		assertTrue(allPossibleNextPositions.contains("7,3"));
	}
}
